name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          todo-app/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Install frontend dependencies
      run: |
        cd todo-app
        npm ci

    - name: Build frontend
      run: |
        cd todo-app
        npm run build

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Build Docker images
      run: |
        docker build -t backend ./backend
        docker build -t frontend ./todo-app

    - name: Test Docker containers
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI || 'mongodb://localhost:27017/test' }}
        CORS_ORIGIN: '*'
        NEXT_PUBLIC_API_URL: 'http://localhost:4000'
      run: |
        # Create a test docker-compose file with MongoDB
        cat > docker-compose.test.yml << EOF
        version: "3.9"
        services:
          
          backend:
            build: ./backend
            environment:
              - PORT=4000
              - MONGODB_URI=\${MONGODB_URI}
              - CORS_ORIGIN=\${CORS_ORIGIN}
            ports:
              - "4000:4000"

          frontend:
            build: ./todo-app
            environment:
              - NEXT_PUBLIC_API_URL=\${NEXT_PUBLIC_API_URL}
            ports:
              - "3000:3000"
            depends_on:
              - backend
        EOF
        
        # Start containers with test configuration
        MONGODB_URI="$MONGODB_URI" CORS_ORIGIN="$CORS_ORIGIN" NEXT_PUBLIC_API_URL="$NEXT_PUBLIC_API_URL" docker-compose -f docker-compose.test.yml up -d
        sleep 30
        # Test backend health endpoint
        curl -f http://localhost:4000/health || (echo "Backend health check failed" && docker-compose -f docker-compose.test.yml logs backend && exit 1)
        # Test frontend
        curl -f http://localhost:3000 || (echo "Frontend check failed" && docker-compose -f docker-compose.test.yml logs frontend && exit 1)
        docker-compose -f docker-compose.test.yml down
